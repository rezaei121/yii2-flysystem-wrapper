<?php

namespace hossein142001\flysystemwrapper;

use hossein142001\flysystemwrapper\models\File;
use hossein142001\flysystemwrapper\models\FileMetadata;
use Yii;
use yii\i18n\PhpMessageSource;

class FlysystemWrapper extends \yii\base\Widget
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $files
     * @param $data
     * @return bool
     */
    public static function upload($files, $data)
    {
        $config = new \League\Flysystem\Config;
        $ret = [];
        foreach ((array)$files as $file) {
            $filePath = Yii::getAlias($data['path']) . '/' . $file->name;
            $fileContent = file_get_contents($file->tempName);

            if (Yii::$app->fs->write($filePath, $fileContent, $config) !== false) {
                $fileModel = new File;
                $fileModel->file_name = $file->name;
                $fileModel->path = $filePath;
                $fileModel->size = $file->size;
                $fileModel->mime_type = $file->type;
                $fileModel->context = isset($data['context']) ? $data['context'] : null;
                $fileModel->version = isset($data['version']) ? $data['version'] : null;
                $fileModel->hash = sha1(uniqid(rand(), TRUE));

                if ($fileModel->save()) {
                    foreach ((array)$data['metadata'] as $metadata => $value) {
                        $fileMetadataModel = new FileMetadata();
                        $fileMetadataModel->file_id = $fileModel->id;
                        $fileMetadataModel->metadata = $metadata;
                        $fileMetadataModel->value = (string)$value;
                        $fileMetadataModel->save();
                    }
                }

                $ret[] = $fileModel;
            } else {
                return false;
            }
        }
        return $ret;
    }

    /**
     * get file by hash key
     * @param $hash
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getByHash($hash)
    {
        return File::find()
            ->alias('f')
            ->innerJoinWith('fileMetadatas')
            ->where(['f.hash' => $hash, 'f.deleted_time' => null])
            ->asArray()
            ->all();
    }

    /**
     * read file by hash key
     * @param $hash
     * @return bool
     */
    public static function readByHash($hash, $return = true)
    {
        $fileModel = File::find()->andWhere(['hash' => $hash])->one();

        if ($fileModel && Yii::$app->fs->has($fileModel->path)) {
            if ($return) {
                header('Content-Description: File Transfer');
                header("Content-Type: " . $fileModel->mime_type);
                header('Content-Disposition: inline; filename=' . $fileModel->file_name);
                header('Expires: 0');
                header('Cache-Control: must-revalidate');
                header('Pragma: public');
                header('Content-Length: ' . $fileModel->size);
                echo Yii::$app->fs->read($fileModel->path);
            } else {
                return ['content' => Yii::$app->fs->read($fileModel->path)];
            }
        }
        return false;
    }

    /**
     * search by metadata or special file model fields
     * @param $params
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function searchByParams($params)
    {
        // special fields is fields that have exist in file model.
        $specialFields = ['context', 'version'];

        $fileModel = File::find()
            ->distinct()
            ->select('hash')
            ->alias('f');

        $i = 1;

        foreach ($params as $meta => $value) {
            if (in_array($meta, $specialFields)) {
                $fileModel->andWhere([$meta => $value]);
                continue;
            }

            $fmAlais = 'fm_' . $i++;
            $fileModel->innerJoin([$fmAlais => FileMetadata::tableName()], "f.id={$fmAlais}.file_id AND {$fmAlais}.metadata=:meta_param AND {$fmAlais}.value=:meta_value", ['meta_param' => $meta, 'meta_value' => $value]);
        }
        $fileModel->andWhere(['f.deleted_time' => null]);

        return $fileModel->all();
    }
}
